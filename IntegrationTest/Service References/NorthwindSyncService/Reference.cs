//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IntegrationTest.NorthwindSyncService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NorthwindSyncService.ISyncService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ISyncService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/Initialize", ReplyAction="http://tempuri.org/ISyncService/InitializeResponse")]
        void Initialize(string scopeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/Initialize", ReplyAction="http://tempuri.org/ISyncService/InitializeResponse")]
        System.Threading.Tasks.Task InitializeAsync(string scopeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetScopeDescription", ReplyAction="http://tempuri.org/ISyncService/GetScopeDescriptionResponse")]
        Microsoft.Synchronization.Data.DbSyncScopeDescription GetScopeDescription();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetScopeDescription", ReplyAction="http://tempuri.org/ISyncService/GetScopeDescriptionResponse")]
        System.Threading.Tasks.Task<Microsoft.Synchronization.Data.DbSyncScopeDescription> GetScopeDescriptionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/BeginSession", ReplyAction="http://tempuri.org/ISyncService/BeginSessionResponse")]
        void BeginSession(Microsoft.Synchronization.SyncProviderPosition position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/BeginSession", ReplyAction="http://tempuri.org/ISyncService/BeginSessionResponse")]
        System.Threading.Tasks.Task BeginSessionAsync(Microsoft.Synchronization.SyncProviderPosition position);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetKnowledge", ReplyAction="http://tempuri.org/ISyncService/GetKnowledgeResponse")]
        MicrosoftSyncPoC.Infrastructure.SyncBatchParameters GetKnowledge();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetKnowledge", ReplyAction="http://tempuri.org/ISyncService/GetKnowledgeResponse")]
        System.Threading.Tasks.Task<MicrosoftSyncPoC.Infrastructure.SyncBatchParameters> GetKnowledgeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetChanges", ReplyAction="http://tempuri.org/ISyncService/GetChangesResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MicrosoftSyncPoC.Infrastructure.WebSyncFaultException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MicrosoftSyncPoC.Infrastructure.SyncBatchParameters))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.SyncSchema))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncContext))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncScopeProgress))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableProgress[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableProgress))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncScopeDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableDescription[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncColumnDescription[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncColumnDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncForeignKeyConstraint[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncForeignKeyConstraint))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Exception))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ForgottenKnowledge))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncKnowledge))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncIdFormatGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ChangeBatch))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncProviderPosition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ConflictResolutionPolicy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncSessionStatistics))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Data.Rule))]
        MicrosoftSyncPoC.Infrastructure.GetChangesParameters GetChanges(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/GetChanges", ReplyAction="http://tempuri.org/ISyncService/GetChangesResponse")]
        System.Threading.Tasks.Task<MicrosoftSyncPoC.Infrastructure.GetChangesParameters> GetChangesAsync(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/ApplyChanges", ReplyAction="http://tempuri.org/ISyncService/ApplyChangesResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MicrosoftSyncPoC.Infrastructure.WebSyncFaultException))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MicrosoftSyncPoC.Infrastructure.SyncBatchParameters))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MicrosoftSyncPoC.Infrastructure.GetChangesParameters))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.SyncSchema))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncContext))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncScopeProgress))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableProgress[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableProgress))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncScopeDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableDescription[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncTableDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncColumnDescription[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncColumnDescription))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncForeignKeyConstraint[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.Data.DbSyncForeignKeyConstraint))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Exception))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ForgottenKnowledge))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncKnowledge))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncIdFormatGroup))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ChangeBatch))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncProviderPosition))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.ConflictResolutionPolicy))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Microsoft.Synchronization.SyncSessionStatistics))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Data.Rule))]
        Microsoft.Synchronization.SyncSessionStatistics ApplyChanges(Microsoft.Synchronization.ConflictResolutionPolicy resolutionPolicy, Microsoft.Synchronization.ChangeBatch sourceChanges, object changeData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/ApplyChanges", ReplyAction="http://tempuri.org/ISyncService/ApplyChangesResponse")]
        System.Threading.Tasks.Task<Microsoft.Synchronization.SyncSessionStatistics> ApplyChangesAsync(Microsoft.Synchronization.ConflictResolutionPolicy resolutionPolicy, Microsoft.Synchronization.ChangeBatch sourceChanges, object changeData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/HasUploadedBatchFile", ReplyAction="http://tempuri.org/ISyncService/HasUploadedBatchFileResponse")]
        bool HasUploadedBatchFile(string batchFileid, string remotePeerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/HasUploadedBatchFile", ReplyAction="http://tempuri.org/ISyncService/HasUploadedBatchFileResponse")]
        System.Threading.Tasks.Task<bool> HasUploadedBatchFileAsync(string batchFileid, string remotePeerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/UploadBatchFile", ReplyAction="http://tempuri.org/ISyncService/UploadBatchFileResponse")]
        void UploadBatchFile(string batchFileid, byte[] batchFile, string remotePeerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/UploadBatchFile", ReplyAction="http://tempuri.org/ISyncService/UploadBatchFileResponse")]
        System.Threading.Tasks.Task UploadBatchFileAsync(string batchFileid, byte[] batchFile, string remotePeerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/DownloadBatchFile", ReplyAction="http://tempuri.org/ISyncService/DownloadBatchFileResponse")]
        byte[] DownloadBatchFile(string batchFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/DownloadBatchFile", ReplyAction="http://tempuri.org/ISyncService/DownloadBatchFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadBatchFileAsync(string batchFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/EndSession", ReplyAction="http://tempuri.org/ISyncService/EndSessionResponse")]
        void EndSession();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncService/EndSession", ReplyAction="http://tempuri.org/ISyncService/EndSessionResponse")]
        System.Threading.Tasks.Task EndSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/ISyncService/Cleanup", ReplyAction="http://tempuri.org/ISyncService/CleanupResponse")]
        void Cleanup();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, Action="http://tempuri.org/ISyncService/Cleanup", ReplyAction="http://tempuri.org/ISyncService/CleanupResponse")]
        System.Threading.Tasks.Task CleanupAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISyncServiceChannel : IntegrationTest.NorthwindSyncService.ISyncService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncServiceClient : System.ServiceModel.ClientBase<IntegrationTest.NorthwindSyncService.ISyncService>, IntegrationTest.NorthwindSyncService.ISyncService {
        
        public SyncServiceClient() {
        }
        
        public SyncServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SyncServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SyncServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SyncServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Initialize(string scopeName) {
            base.Channel.Initialize(scopeName);
        }
        
        public System.Threading.Tasks.Task InitializeAsync(string scopeName) {
            return base.Channel.InitializeAsync(scopeName);
        }
        
        public Microsoft.Synchronization.Data.DbSyncScopeDescription GetScopeDescription() {
            return base.Channel.GetScopeDescription();
        }
        
        public System.Threading.Tasks.Task<Microsoft.Synchronization.Data.DbSyncScopeDescription> GetScopeDescriptionAsync() {
            return base.Channel.GetScopeDescriptionAsync();
        }
        
        public void BeginSession(Microsoft.Synchronization.SyncProviderPosition position) {
            base.Channel.BeginSession(position);
        }
        
        public System.Threading.Tasks.Task BeginSessionAsync(Microsoft.Synchronization.SyncProviderPosition position) {
            return base.Channel.BeginSessionAsync(position);
        }
        
        public MicrosoftSyncPoC.Infrastructure.SyncBatchParameters GetKnowledge() {
            return base.Channel.GetKnowledge();
        }
        
        public System.Threading.Tasks.Task<MicrosoftSyncPoC.Infrastructure.SyncBatchParameters> GetKnowledgeAsync() {
            return base.Channel.GetKnowledgeAsync();
        }
        
        public MicrosoftSyncPoC.Infrastructure.GetChangesParameters GetChanges(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge) {
            return base.Channel.GetChanges(batchSize, destinationKnowledge);
        }
        
        public System.Threading.Tasks.Task<MicrosoftSyncPoC.Infrastructure.GetChangesParameters> GetChangesAsync(uint batchSize, Microsoft.Synchronization.SyncKnowledge destinationKnowledge) {
            return base.Channel.GetChangesAsync(batchSize, destinationKnowledge);
        }
        
        public Microsoft.Synchronization.SyncSessionStatistics ApplyChanges(Microsoft.Synchronization.ConflictResolutionPolicy resolutionPolicy, Microsoft.Synchronization.ChangeBatch sourceChanges, object changeData) {
            return base.Channel.ApplyChanges(resolutionPolicy, sourceChanges, changeData);
        }
        
        public System.Threading.Tasks.Task<Microsoft.Synchronization.SyncSessionStatistics> ApplyChangesAsync(Microsoft.Synchronization.ConflictResolutionPolicy resolutionPolicy, Microsoft.Synchronization.ChangeBatch sourceChanges, object changeData) {
            return base.Channel.ApplyChangesAsync(resolutionPolicy, sourceChanges, changeData);
        }
        
        public bool HasUploadedBatchFile(string batchFileid, string remotePeerId) {
            return base.Channel.HasUploadedBatchFile(batchFileid, remotePeerId);
        }
        
        public System.Threading.Tasks.Task<bool> HasUploadedBatchFileAsync(string batchFileid, string remotePeerId) {
            return base.Channel.HasUploadedBatchFileAsync(batchFileid, remotePeerId);
        }
        
        public void UploadBatchFile(string batchFileid, byte[] batchFile, string remotePeerId) {
            base.Channel.UploadBatchFile(batchFileid, batchFile, remotePeerId);
        }
        
        public System.Threading.Tasks.Task UploadBatchFileAsync(string batchFileid, byte[] batchFile, string remotePeerId) {
            return base.Channel.UploadBatchFileAsync(batchFileid, batchFile, remotePeerId);
        }
        
        public byte[] DownloadBatchFile(string batchFileId) {
            return base.Channel.DownloadBatchFile(batchFileId);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadBatchFileAsync(string batchFileId) {
            return base.Channel.DownloadBatchFileAsync(batchFileId);
        }
        
        public void EndSession() {
            base.Channel.EndSession();
        }
        
        public System.Threading.Tasks.Task EndSessionAsync() {
            return base.Channel.EndSessionAsync();
        }
        
        public void Cleanup() {
            base.Channel.Cleanup();
        }
        
        public System.Threading.Tasks.Task CleanupAsync() {
            return base.Channel.CleanupAsync();
        }
    }
}
